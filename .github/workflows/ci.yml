name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, ubuntu-20.04]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        pytorch-version: ["2.0.0", "2.1.0"]
        exclude:
          # PyTorch 2.0.0 has limited Python version support
          - python-version: "3.11"
            pytorch-version: "2.0.0"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build

    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Create virtual environment and install PyTorch
      run: |
        uv venv .venv --python ${{ matrix.python-version }}
        source .venv/bin/activate
        echo "VIRTUAL_ENV=$(pwd)/.venv" >> $GITHUB_ENV
        echo "$(pwd)/.venv/bin" >> $GITHUB_PATH
        uv pip install torch==${{ matrix.pytorch-version }} torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu

    - name: Install dependencies
      run: |
        source .venv/bin/activate
        uv pip install -e ".[dev,benchmark]"

    - name: Lint with flake8
      run: |
        source .venv/bin/activate
        uv pip install flake8
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Format check with black
      run: |
        source .venv/bin/activate
        black --check src tests

    - name: Import sort check with isort
      run: |
        source .venv/bin/activate
        isort --check-only src tests

    - name: Type check with mypy
      run: |
        source .venv/bin/activate
        mypy src --ignore-missing-imports

    - name: Test with pytest
      run: |
        source .venv/bin/activate
        pytest tests/ -v --cov=tt_buda --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install build dependencies
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        uv venv .venv --python 3.10
        source .venv/bin/activate
        echo "VIRTUAL_ENV=$(pwd)/.venv" >> $GITHUB_ENV
        echo "$(pwd)/.venv/bin" >> $GITHUB_PATH
        uv pip install build twine

    - name: Build package
      run: |
        source .venv/bin/activate
        python -m build

    - name: Check package
      run: |
        source .venv/bin/activate
        twine check dist/*

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  docker:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: tt-buda-kernels:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max 