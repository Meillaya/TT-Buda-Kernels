[build-system]
requires = ["setuptools>=61.0", "wheel", "pybind11>=2.10.0", "cmake>=3.20"]
build-backend = "setuptools.build_meta"

[project]
name = "tt-buda-kernels"
version = "0.1.0"
description = "Open-source AI software stack with Tenstorrent backend support"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    {name = "TT-Buda Kernels Contributors", email = "contributors@tt-buda-kernels.org"}
]
maintainers = [
    {name = "TT-Buda Kernels Team", email = "maintainers@tt-buda-kernels.org"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: C++",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Compilers",
]
keywords = ["ai", "ml", "compiler", "pytorch", "tenstorrent", "kernels"]
requires-python = ">=3.9"
dependencies = [
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "torchaudio>=2.0.0",
    "numpy>=1.21.0",
    "pybind11>=2.10.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "click>=8.0.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
    "jinja2>=3.1.0",
    "aiofiles>=23.0.0",
    "psutil>=5.9.0",
    "nvidia-ml-py>=12.535.0",
    "transformers>=4.35.0",
    "datasets>=2.14.0",
    "accelerate>=0.24.0",
    "diffusers>=0.24.0",
    "wandb>=0.16.0",
    "tensorboard>=2.14.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.17.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.3.0",
    "tqdm>=4.66.0",
    "omegaconf>=2.3.0",
    "hydra-core>=1.3.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.6.0",
    "pre-commit>=3.5.0",
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "myst-parser>=2.0.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
    "ipywidgets>=8.1.0",
]
benchmark = [
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.0",
    "py-spy>=0.3.14",
    "torch-tb-profiler>=0.4.0",
    "nvtx>=0.2.0",
]
distributed = [
    "mpi4py>=3.1.0",
]
dashboard = [
    "redis>=5.0.0",
    "celery>=5.3.0",
    "streamlit>=1.28.0",
    "dash>=2.14.0",
    "bokeh>=3.3.0",
]

[project.urls]
Homepage = "https://github.com/meillaya/TT-Buda-Kernels"
# Documentation = "https://tt-buda-kernels.readthedocs.io"
Repository = "https://github.com/meillaya/TT-Buda-Kernels.git"
Issues = "https://github.com/meillaya/TT-Buda-Kernels/issues"
Changelog = "https://github.com/meillaya/TT-Buda-Kernels/blob/main/CHANGELOG.md"

[project.scripts]
tt-buda = "tt_buda.cli:main"
tt-compile = "tt_buda.compiler.cli:compile_model"
tt-benchmark = "tt_buda.benchmarks.cli:benchmark"
tt-dashboard = "tt_buda.dashboard.cli:start_dashboard"

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]
include = ["tt_buda*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"tt_buda" = ["*.so", "*.dll", "*.dylib", "*.yaml", "*.json", "*.toml"]
"tt_buda.kernels" = ["*.cpp", "*.cu", "*.h", "*.hpp"]
"tt_buda.dashboard" = ["static/*", "templates/*"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["tt_buda"]
known_third_party = ["torch", "numpy", "fastapi", "pydantic"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "torchvision.*",
    "torchaudio.*",
    "transformers.*",
    "diffusers.*",
    "datasets.*",
    "accelerate.*",
    "wandb.*",
    "nvidia.*",
    "psutil.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "pandas.*",
    "sklearn.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "benchmark: marks tests as benchmarks",
    "gpu: marks tests that require GPU",
    "distributed: marks tests that require distributed setup",
]

[tool.coverage.run]
source = ["src/tt_buda"]
omit = [
    "*/tests/*",
    "*/benchmarks/*",
    "*/examples/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 